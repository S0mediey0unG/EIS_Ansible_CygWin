---
  - name: Check all port numbers are accessible from the TrustGate
    wait_for:
      host:        "{{ item.server }}"
      port:        "{{ item.port }}"
      state:       started
      delay:       0
      timeout:     1
    ignore_errors: yes
    loop:
       - { server: '109.207.15.2',   port: '443' }
       - { server: '10.112.132.254', port: '80' }
       - { server: '10.112.132.253', port: '80' }
       - { server: '172.20.3.12',    port: '7500' }
       - { server: '172.20.3.12',    port: '21' }
       - { server: '192.168.100.2',  port: '9443' }
    when: inventory_hostname in ['astraPH1', 'astraKSH37']

  - name: Create dir for logs /iitrust/tests
    file:
      path: /iitrust/tests
      state: directory
    ignore_errors: yes

  - name: check.py
    shell: rm /iitrust/tests/*;cd /home/compadmin/distr;python3 check.py > /iitrust/tests/check_py.txt
    ignore_errors: yes

  - name: df info
    shell: df -i > /iitrust/tests/dfi.txt;df -h > /iitrust/tests/dfh.txt;du -sh /var/lib/docker/volumes;du -sh /var/lib/docker/volumes/* | grep -E 'service|g2g|postgres' > /iitrust/tests/volumes_data_size.txt
    ignore_errors: yes

  - name: network_cfg
    shell: cp /etc/network/interfaces /iitrust/tests/interfaces.txt

  - name: route
    shell: route -n > /iitrust/tests/route.txt
    ignore_errors: yes

  - name: uptime
    shell: uptime > /iitrust/tests/uptime.txt
    ignore_errors: yes

  - name: check vm.max_map_count
    shell: cat /etc/sysctl.conf | grep vm.max_map_count > /iitrust/tests/vm.max_map_count.txt
    ignore_errors: yes
    when: inventory_hostname in ['astraPH1', 'astraKSH37']

  - name: distr backup
    shell: 7z a -r /iitrust/tests/distr.7z /home/compadmin/distr/* -xr'!*.zip' -xr'!*.deb' -xr'!install.log' -xr'!*.run' -xr'!*.bz2' -xr'!libs/*' -xr'!images/*'
    ignore_errors: yes

  - name: tg_failover
    shell: journalctl --since '5 minutes ago' -u tg_failover > /iitrust/tests/jr_tg_failover.txt
    ignore_errors: yes

  - name: cluster_status
    shell: docker exec -it services_rabbit_1 rabbitmqctl cluster_status > /iitrust/tests/cluster_status.txt
    ignore_errors: yes
    when: inventory_hostname in ['astraPH1', 'astraKSH37']

  - name: list_queues
    shell: docker exec -it services_rabbit_1 rabbitmqctl list_queues -p r502  > /iitrust/tests/list_queues.txt
    ignore_errors: yes
    when: inventory_hostname in ['astraPH1', 'astraKSH37']

  - name: pg_control
    shell: docker exec -it postgres_postgres_1 pg_controldata > /iitrust/tests/pg_control.txt
    ignore_errors: yes
    when: inventory_hostname in ['astraPH1_DB', 'astraKSH37_DB']

  - name: iit_signer_status
    shell: systemctl status iit_signer > /iitrust/tests/iit_signer_status.txt
    ignore_errors: yes
    when: inventory_hostname in ['astraPH1', 'astraKSH37']

  - name: docker_ps_status
    shell: docker ps > /iitrust/tests/docker_ps.txt
    ignore_errors: yes

  - name: Fetch last 300 lines of logs from a Docker container
    shell: docker logs -t --tail 300 postgres_postgres_1 > /iitrust/tests/postgress_logs.txt 2>&1
    when: inventory_hostname in ['astraPH1_DB', 'astraKSH37_DB']

  - name: Execute SQL query in PostgreSQL container and save the result to a file
    shell: >
      docker exec -i postgres_postgres_1 psql -d g2g -c "
        SELECT to_char(created, 'YYYY-MM-DD HH24'), type, count(*)
        FROM public.workflow_workflow
        WHERE to_char(created, 'YYYY-MM-DD HH24') >= '{{ ansible_date_time.year }}-{{  ansible_date_time.month  }}-{{  ansible_date_time.day }}'
        GROUP BY to_char(created, 'YYYY-MM-DD HH24'), type
        ORDER BY to_char(created, 'YYYY-MM-DD HH24'), type DESC;" > /iitrust/tests/postgress_stats_today.txt
    when: inventory_hostname in ['astraPH1_DB', 'astraKSH37_DB']

  - name: Create a host-specific archive of selected logs
    shell: zip -j /iitrust/tests/{{ inventory_hostname }}.zip /iitrust/tests/*

  - name: copy logs
    fetch:
      src: "/iitrust/tests/{{ item }}"
      dest: "/Users/vadimkorneev/Desktop/LOGS_{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}_{{ ansible_date_time.minute }}/{{ inventory_hostname }}/"
      flat: yes
    loop:
      - "{{ inventory_hostname }}.zip"

  - name: Fetch GrayLog API request and save to file
    shell: >
      /opt/homebrew/bin/wget --user=admin --password=admin
      --header="Content-type: application/json"
      --header="Accept: application/json"
      'http://{{ ansible_default_ipv4.address }}:9000/api/search/universal/relative?sort=timestamp:asc&limit=10000&query=timestamp:["2023-03-01 00:00:00.000" TO "2030-03-01 01:00:00.000"]'
      -O - -q | /opt/homebrew/bin/jq '.' > /Users/vadimkorneev/Desktop/LOGS_{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}_{{ ansible_date_time.minute }}/{{ inventory_hostname }}/GrayLogApiRequest.txt
    delegate_to: 127.0.0.1
    become: no
    ignore_errors: yes
    when: inventory_hostname in ['astraPH1', 'astraKSH37']
